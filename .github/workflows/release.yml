name: Create Release

on:
  push:
    tags:
      - 'v*'


jobs:
  release:
    runs-on: ubuntu-latest
    name: Create Release
    steps:
    - id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
    - name: Save upload_url for release
      uses: actions/upload-artifact@v2.2.3
      with:
        name: upload_url
        path: upload_url.txt

  build:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, "386"]
    name: release ${{ matrix.os }}/${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v3.0.1
      with:
        fetch-depth: 1
    - name: download upload_url artifact for release
      uses: actions/download-artifact@v2.0.9
      with:
        name: upload_url
    - name: save upload_url to output
      id: create_release
      run: echo "::set-output name=upload_url::$(cat upload_url/upload_url.txt)"
    - name: set TAG output from github.ref
      id: tag
      run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
    - name: set asset name
      id: asset
      env:
        TAG: ${{ steps.tag.outputs.tag }}
        OS: ${{ matrix.os }}
        ARCH: ${{ matrix.arch }}
      run: |
        if [ "${OS}" == "windows" ]; then
          EXT=".exe"
        fi
        echo "::set-output name=name::jutge.${TAG}.${OS}.${ARCH}.${EXT}"
    - name: build binary
      env:
        GOARCH: ${{ matrix.arch }}
        GOOS: ${{ matrix.os }}
      run: go build -o ${{ steps.asset.outputs.name }}
    - name: Upload Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.asset.outputs.name }}
        asset_name: ${{ steps.asset.outputs.name }}
        asset_content_type: application/x-binary
